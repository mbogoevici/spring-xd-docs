=== Introduction

This chapter will show you how to execute Spring Batch Jobs using Spring XD.

=== Setting up a simple Batch Job

==== Creating the Tasklet

[source,xml]
----
package org.springframework.xd.dirt.plugins.job;

import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;

public class HelloSpringXDTasklet implements Tasklet {

	@Override
	public RepeatStatus execute(StepContribution contribution,
			ChunkContext chunkContext) throws Exception {

		System.out.println("Hello Spring XD!");

		return RepeatStatus.FINISHED;
	}
}
----

==== Setting Up the Application Context

Under `modules/common/job`, please create the following XML Application context file named `job.xml`: 

[source,xml]
----

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd">

	<batch:job id="helloSpringXD">
		<batch:step id="helloSpringXDStep">
			<batch:tasklet ref="helloSpringXDTasklet" />
		</batch:step>
	</batch:job>

	<bean id="helloSpringXDTasklet" class="org.springframework.xd.dirt.plugins.job.HelloSpringXDTasklet" />

</beans>
----

=== Execute the Job

=== Execute the Batch Job Once (Immediately)

`curl -X PUT -H 'Content-Type: text/plain' -d "job" http://localhost:8080/streams/helloSpringXD`

=== Using AdHoc Cron Expression

`curl -X PUT -H 'Content-Type: text/plain' -d "job --cron='*/10 * * * * *'" http://localhost:8080/streams/helloSpringXD`

=== Using Separate Trigger

`curl -X PUT -H 'Content-Type: text/plain' -d "trigger --cron='*/10 * * * * *'" http://localhost:8080/streams/mytrigger`

No we can reference the trigger when creating the job:

`curl -X PUT -H 'Content-Type: text/plain' -d "job --trigger=mytrigger" http://localhost:8080/streams/helloWorldJob`




 


