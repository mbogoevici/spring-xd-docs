=== Introduction
This section will cover the processors available out-of-the-box with Spring XD.  As a prerequisite, start the XD Container
as instructed in the link:Getting-Started#getting-started[Getting Started] page.

The Processors covered are

* <<filter, Filter>>
* <<json-value-filter, JSON Field Value Filter>>
* <<transform, Transform>>
* <<json-field-extractor, JSON Field Extractor>>
* <<script, Script>>

See the section link:Creating-a-Processor-Module#creating-a-processor-module[Creating a Processor Module] for information on how to create custom processor modules.

[[filter]]
=== Filter
Use the filter module in a link:Streams#streams[stream] to determine whether a Message should be passed to the output channel.

==== Filter with SpEL expression
The simplest way to use the filter processor is to pass a SpEL expression when creating the stream. The expression should evaluate the message and return true or false.  For example:

    $ curl -d "http | filter --expression=payload=='good' | log" http://localhost:8080/streams/filtertest

This filter will only pass Messages to the log sink if the payload is the word "good". Try sending "good" to the HTTP endpoint and you should see it in the XD log:

    $ curl -d "good" http://localhost:9000

Alternatively, if you send the word "bad" (or anything else), you shouldn't see the log entry.

==== Filter with Groovy Script
For more complex filtering, you can pass the location of a Groovy script using the _script_ attribute. If you want to pass variable values to your script, you can optionally pass the path to a properties file using the _properties-location_ attribute. All properties in the file will be made available to the script as variables.

    $ curl -d "http --port=9001 | filter --script=custom-filter.groovy --properties-location=custom-filter.properties | log" http://localhost:8080/streams/groovyfiltertest

By default, Spring XD will search the classpath for _custom-filter.groovy_ and _custom-filter.properties_. You can place the script in _${xd.home}/modules/processor/scripts_ and the properties file in _${xd.home}/config_ to make them available on the classpath.  Alternatively, you can prefix the _script_ and _properties-location_ values with _file:_ to load from the file system.

[[json-value-filter]]
=== JSON Field Value Filter
Use this filter to only pass messages to the output channel if they contain a specific JSON field matching a specific value.

    $ curl -d "http --port=9002 | json-field-value-filter --fieldName=firstName --fieldValue=John | log" http://localhost:8080/streams/jsonfiltertest

This filter will only pass Messages to the log sink if the JSON payload contains the _firstName_ "John". Try sending this payload to the HTTP endpoint and you should see it in the XD log:

    $ curl -d "{\"firstName\":\"John\", \"lastName\":\"Smith\"}" http://localhost:9002

Alternatively, if you send a different _firstName_, you shouldn't see the log entry.

[[transform]]
=== Transform
Use the transform module in a link:Streams#streams[stream] to convert a Message's content or structure.

==== Transform with SpEL expression
The simplest way to use the transform processor is to pass a SpEL expression when creating the stream. The expression should return the modified message or payload.  For example:

    $ curl -d "http --port=9003 | transform --expression='FOO' | log" http://localhost:8080/streams/transformtest

This transform will convert all message payloads to the word "FOO". Try sending something to the HTTP endpoint and you should see "FOO" in the XD log:

    $ curl -d "some message" http://localhost:9003

==== Transform with Groovy Script
For more complex transformations, you can pass the location of a Groovy script using the _script_ attribute. If you want to pass variable values to your script, you can optionally pass the path to a properties file using the _properties-location_ attribute. All properties in the file will be made available to the script as variables.

    $ curl -d "http --port=9004 | transform --script=custom-transform.groovy --properties-location=custom-transform.properties | log" http://localhost:8080/streams/groovytransformtest

By default, Spring XD will search the classpath for _custom-transform.groovy_ and _custom-transform.properties_. You can place the script in _${xd.home}/modules/processor/scripts_ and the properties file in _${xd.home}/config_ to make them available on the classpath.  Alternatively, you can prefix the _script_ and _properties-location_ values with _file:_ to load from the file system.

[[json-field-extractor]]
=== JSON Field Extractor
This processor converts a JSON message payload to the value of a specific JSON field.

    $ curl -d "http --port=9005 | json-field-extractor --fieldName=firstName | log" http://localhost:8080/streams/jsontransformtest

Try sending this payload to the HTTP endpoint and you should see just the value "John" in the XD log:

    $ curl -d "{\"firstName\":\"John\", \"lastName\":\"Smith\"}" http://localhost:9005

[[script]]
=== Script
The script processor contains a _Service Activator_ that invokes a specified Groovy script. This is a slightly more generic way to accomplish processing logic, as the provided script may simply terminate the stream as well as transform or filter Messages. 

To use the module, pass the location of a Groovy script using the _location_ attribute. If you want to pass variable values to your script, you can optionally pass the path to a properties file using the _properties-location_ attribute. All properties in the file will be made available to the script as variables.

    $ curl -d "http --port=9006 | script --location=custom-processor.groovy --properties-location=custom-processor.properties | log" http://localhost:8080/streams/groovyprocessortest

By default, Spring XD will search the classpath for _custom-processor.groovy_ and _custom-processor.properties_. You can place the script in _${xd.home}/modules/processor/scripts_ and the properties file in _${xd.home}/config_ to make them available on the classpath.  Alternatively, you can prefix the _location_ and _properties-location_ values with _file:_ to load from the file system.
