[[creating-a-sink-module]]
ifndef::env-github[]
== Creating a Sink Module
endif::[]

=== Introduction

As outlined in the link:Modules#modules[modules] document, Spring XD currently supports four types of modules: source, sink, and processor for stream processing and job for batch procesing.  This document walks through implementing a custom sink module.

The last module in a link:Streams#streams[stream] is always a sink. Sink modules are built with Spring Integration.  A _sink_ consumes messages on its _input_ channel and sends them to an external resource to terminate the stream.

Spring Integration provides a number of outbound channel adapters to integrate with various transports such as TCP, AMQP, JMS, Kafka, HTTP, web services, mail, or data stores such as file, Redis, MongoDB, JDBC, Splunk, Gemfire, and more. It is straightforward to create a sink module using an existing outbound channel adapters by writing just a single XML bean definition file. Such outbound channel adapters are typically used to integrate streams with legacy systems. Alternately, you may prefer to use a Java API to provide data to an external system. In this case, the sink can invoke a Java method using a http://docs.spring.io/spring-integration/docs/latest-ga/reference/html/messaging-endpoints-chapter.html#service-activator[Service Activator].  

Here, we will demonstrate step-by-step how to create and install a sink module using the Spring Integration http://docs.spring.io/spring-integration/reference/html/redis.html#redis-store-outbound-channel-adapter[Redis Store Outbound Channel Adapter].

=== Create the module Application Context
Configure the outbound channel adapter in a file called _redis-store.xml_:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-redis="http://www.springframework.org/schema/integration/redis"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/redis
		http://www.springframework.org/schema/integration/redis/spring-integration-redis.xsd">

	<int:channel id="input" />

	<int-redis:store-outbound-channel-adapter
		id="redisListAdapter" collection-type="LIST" channel="input" key="${collection}" />

	<beans:bean id="redisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<beans:property name="hostName" value="${host}" />
		<beans:property name="port" value="${port}" />
	</beans:bean>

</beans>
----

The adapter, as required by Spring XD, is configured as an endpoint on a channel named _input_.  When a message is consumed, the Redis Store Outbound Channel Adapter will write the payload to a Redis list with a key given by the _${collection}_ property.  By default, the Redis Store Outbound Channel Adapter uses a bean named _redisConnectionFactory_ to connect to the Redis server. Here the connection factory is configured with property placeholders _${host}_, _${port}_ which will be provided as module options in stream definitions that use this sink.

[NOTE] 
====
By default, the adapter uses a _StringRedisTemplate_. Therefore, this module will store all payloads directly as Strings. You may configure a _RedisTemplate_ with a different value Serializer to serialize other data types, such as Java objects, to the Redis collection.
====

Spring XD will automatically provide a PropertyPlaceholderConfigurer to your application context, so there is no need to declare one here. You can simply reference property names and users can then pass in values when creating a link:Streams#streams[stream] using the DSL. If you want to provide default values for these properties, you may provide them directly using the common syntax:

[source,xml]
----
<int-redis:store-outbound-channel-adapter
		id="redisListAdapter" collection-type="LIST" channel="input" key="${collection:myCollection}" />

<beans:bean id="redisConnectionFactory"
	class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	<beans:property name="hostName" value="${host:localhost}" />
	<beans:property name="port" value="${port:6379}" />
</beans:bean>
----

However, we recommend that you provide Module Option Metadata including a description, type, and optional default value, corresponding to thes property names. Module option metadata supports features like auto-completion in the Spring XD shell and option validation. You can provide these as properties in _redis-store.properties_, like so:

----
options.collection.description = the name of the list
options.collection.default= ${xd.stream.name}
options.collection.type = java.lang.String
#
options.host.description = the host name for the Redis store
options.host.default= localhost
options.host.type = java.lang.String
#
options.port.description = the port for the Redis store
options.port.default= 6379
options.port.type = java.lang.Integer
---- 

Note that the _collection_ defaults to the stream name, referencing a common property provided by Spring XD.

Alternately, you can write a POJO to define the metadata. Using a Java class provides better validation along with additional features but also requires that the class be packaged as part of the module.  See link:ModuleOptionsMetadata#module-options-metadata[Module Options Metadata] for more details.

=== Create a module project
This section covers creating the module as a standalone project containing some code to test the module. Since the module requires no Java code (unless you are providing a module options metadata class), this step can be skipped. Instead you can <<install-the-sink-module, install>> _redis-store_.xml and _redis-store_.properties directly. 

The module can be tested in isolation by writing test using Spring Integration to load the context file and validate that messages are stored in Redis. In order to write the test, you will need to create a Java project in an IDE such as STS, Eclipse, or IDEA. Eclipse will be used for this example.

Create a _redis-store_ directory and add _redis-store.xml_ to _src/main/resources/config_. Add the following _build.gradle_ (or an equivalent _pom.xml_) to the root directory:

[source,groovy]
----
description = 'Redis Store Sink Module'
group = 'org.springframework.xd.samples'
version = '1.0.0.BUILD-SNAPSHOT'

buildscript {
    repositories {
        maven { url "http://repo.spring.io/snapshot" }
        mavenLocal()
        maven { url "http://jcenter.bintray.com/" }
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
     mavenLocal()
     maven { url "http://jcenter.bintray.com/" }
     maven { url "http://repo.spring.io/snapshot" }
     maven { url "http://repo.spring.io/milestone" }
     
}

dependencies {
    testCompile('org.springframework.xd:spring-xd-module:1.1.0.BUILD-SNAPSHOT') 
    testCompile('org.springframework.xd:spring-xd-module-spi:1.1.0.BUILD-SNAPSHOT') 
    testCompile('org.springframework.xd:spring-xd-test:1.1.0.BUILD-SNAPSHOT') 
}
----

Run _gradle eclipse_ to generate the Eclipse project. Import the project into Eclipse.

==== Create the Spring integration test
The main objective of the test is to ensure that messages are stored in a Redis list once the module's Application Context is loaded. This can be tested by adding an Inbound Channel Adapter that will direct test messages to the _input_ channel.

Add the following _src/test/resources/org/springframework/xd/samples/test-context.xml_:
[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:int="http://www.springframework.org/schema/integration"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<context:property-placeholder properties-ref="props"/>

	<util:properties id="props">
		<prop key="collection">mycollection</prop>
		<prop key="host">localhost</prop>
		<prop key="port">6379</prop>
	</util:properties>

	<import resource="classpath:config/redis-store.xml"/>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory"/>
	</bean>
</beans>
----

This context imports the module configuration and adds PropertyPlaceholderConfigurer along with property values ordinarily provided by the XD container. The _redisTemplate_ is provided to verify that input data is stored in Redis.

Next, create and run the _src/test/java/org/springframework/xd/samples/RedisStoreSinkModuleTest_:
[source,java]
----
package org.springframework.xd.samples;

import static org.junit.Assert.assertEquals;

import java.util.concurrent.TimeUnit;

import org.junit.Test;
import org.junit.runner.RunWith;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.support.GenericMessage;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:test-context.xml")
public class RedisStoreSinkModuleTest {

	@Autowired
	RedisTemplate<String,String> redisTemplate;

	@Autowired
	MessageChannel input;

	@Test
	public void test() {
		input.send(new GenericMessage<String>("hello"));
		assertEquals("hello", redisTemplate.boundListOps("mycollection").leftPop(5, TimeUnit.SECONDS));
	}
}
----
The test will load the module application context using our test context and send a message to the module's _input_ channel. It will fail if the input payload "hello" is not added to the Redis list within 5 seconds.

==== Run the test
The test requires a running Redis server. See link:Getting-Started#getting-started[Getting Started] for information on installing and starting Redis.

==== Test the Module Options
Another test you may want to include is one to verify the module options metadata, as defined in _redis-store.properties_ Here is an example _ModuleOptionsTest_ that uses Spring XD's _DefaultModuleOptionsMetadataResolver_

[source, java]
-----
package org.springframework.xd.samples;

import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;
import static org.springframework.xd.module.ModuleType.*;

import org.hamcrest.Matcher;
import org.junit.Test;

import org.springframework.xd.module.ModuleDefinition;
import org.springframework.xd.module.ModuleDefinitions;
import org.springframework.xd.module.options.DefaultModuleOptionsMetadataResolver;
import org.springframework.xd.module.options.ModuleOption;
import org.springframework.xd.module.options.ModuleOptionsMetadata;
import org.springframework.xd.module.options.ModuleOptionsMetadataResolver;


/**
 * Tests expected module properties are present.
 */
public class ModuleOptionsTest {

	private String moduleName = "redis-store";

	@Test
	public void testModuleOptions() {
		ModuleOptionsMetadataResolver moduleOptionsMetadataResolver = new DefaultModuleOptionsMetadataResolver();
		String resource = "classpath:/";
		ModuleDefinition definition = ModuleDefinitions.simple(moduleName, processor, resource);
		ModuleOptionsMetadata metadata = moduleOptionsMetadataResolver.resolve(definition);

		assertThat(
				metadata,
				containsInAnyOrder(moduleOptionNamed("collection"), moduleOptionNamed("host"),
						moduleOptionNamed("port")));

		for (ModuleOption moduleOption : metadata) {
			if (moduleOption.getName().equals("collection")) {
				assertEquals("${xd.stream.name}", moduleOption.getDefaultValue());
			}
			if (moduleOption.getName().equals("port")) {
				assertEquals("6379", moduleOption.getDefaultValue());
			}
			if (moduleOption.getName().equals("host")) {
				assertEquals("localhost", moduleOption.getDefaultValue());
			}
		}
	}

	public static Matcher<ModuleOption> moduleOptionNamed(String name) {
		return hasProperty("name", equalTo(name));
	}
}
-----

You now have a way to build and test your new module independently. Time to install the module to Spring XD!

[[install-the-sink-module]]
=== Install the sink module

To install this module, if you created the module project as described above, you can simply build the jar using gradle and copy it to Spring XD's _modules/sink_ directory.  

[source, bash]
----
$./gradlew jar
$cp build/libs/redis-store-1.0.0.BUILD-SNAPSHOT.jar <xd-install-home>/xd/modules/sink/redis-store.jar
----

Alternately, you can create a directory _modules/sink/redis-store/config_ and copy _redis-store.properties_ and _redis-store.xml_ there.

See link:Modules#registering-a-module[registering a module] for more details. 

=== Test the module
Once the XD server is running, create a stream to test your new module. This stream will write tweets containing the word "java" to Redis as a JSON string:

    xd:> stream create --name javasearch --definition "twittersearch --consumerKey=<your_key> --consumerSecret=<your_secret> --query=java | redis-store --collection=javatweets" --deploy

Note that you need to have a consumer key and secret to use the `twittersearch` module. See the description in the link:Streams#streams[streams] section for more information.

Fire up the redis-cli and verify that tweets are being stored:

[source,bash]
----
$ redis-cli
redis 127.0.0.1:6379> lrange javatweets 0 -1
1) {\"id\":342386150738120704,\"text\":\"Now Hiring: Senior Java Developer\",\"createdAt\":1370466194000,\"fromUser\":\"jencompgeek\",...\"}"
----
