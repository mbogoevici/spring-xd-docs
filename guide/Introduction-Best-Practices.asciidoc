When running a distributed Spring XD runtime, there are a number of considerations related to performance and reliability. In most cases, these involve settings that have tradeoffs, but in this section we provide some background so you know what the options are and how to configure them.

In the link:Deployment[Deployment] section that follows, we provide detailed information about various properties that can be passed along with the `stream deploy` command. That section also describes a scenario that is common for minimizing network hops, where direct binding can occur between modules rather than having each pipe within a stream correspond to a send and receive over the Message Bus. For more detail see the link:Deployment#direct-binding[Direct Binding] subsection.

Another relevant topic for minimizing network hops is the ability to /compose/ modules. That is a useful technique where a subset of the stream's contiguous modules can be grouped together as if a single module. All of the pipes within the composed module will rely upon a local transport rather than sending and receiving via the Message Bus. For more detail read the link:Modules#composing-modules[Composing Modules] section.

For production use, high availability will typically be a requirement for the data transport. Therefore, we recommend using Spring XD's RabbitMQ-based Message Bus. In the link:MessageBus[Message Bus Configuration] section that follows, we provide details on the relevant HA configuration settings as well as other reliability settings, security settings, and error-handling capabilities. When configuring a RabbitMQ Message Bus, you will also want to consider several performance settings. For example, unless strict sequential ordering is required, the /prefetch/ value should be overridden (the default is 1). That can lead to a significant performance improvement. In the less likely case that performance concerns completely outweigh reliability, you can disable acknowledgements and even disable the persistence of messages. For a listing of these settings and more, refer to the link:Application-Configuration#rabbitmq[RabbitMQ Configuration] section. Several performance related configuration settings exist on the broker itself, and those are well-documented in the link:http://www.rabbitmq.com/admin-guide.html[RabbitMQ Admin Guide]. For example, the /vm_memory_high_watermark/ and /vm_memory_high_watermark_paging_ratio/ are both explained within the link:http://www.rabbitmq.com/memory.html[Flow Control] subsection of the guide.

Since the Spring XD runtime uses ZooKeeper to manage the state of the various container nodes as well as the leader election for admin nodes, it is important to follow the guidelines for running a ZooKeeper ensemble configuration in production. Relevant topics include link:https://cwiki.apache.org/confluence/display/ZOOKEEPER/FAQ#FAQ-HowdoIsizeaZooKeeperensemble(cluster)?[Cluster Sizing] and link:https://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html#sc_designing[Server Deployment].

