=== Introduction

To change the configuration of the server components you can use environment variables or make changes to the `$XD_HOME/config/xd-config.yml` YAML file.  Alternatively, you can set the environment variable `XD_CONFIG` to point to a file (use a file:// URL). and that file will then be used instead.  The values in this configuration file will overwrite the values of the default https://github.com/spring-projects/spring-xd/blob/master/spring-xd-dirt/src/main/resources/application.yml[application.yml] file that is embedded in the XD jar file.

The use of YAML is an alternative to using property files.  The support for processing YAML files comes from the underlying use of http://projects.spring.io/spring-boot/[Spring Boot] as the basis for the XD server implementation.

To change the configuration of properties used in modules, look into the module definition file and locate the property file that is being referenced.  The file will often reside in the directory `$XD_HOME/config`.

In this section we will walk through configuring some of the more common properties of Spring XD servers.

==== Configuring Multiple Environments

You may be running Spring XD in different environments (for example test, production) with slightly different configurations for each one. The simplest option is to use a separate configuration file in each environment, external to the XD distro, and set the `XD_CONFIG` environment variable to point to it (as described above). This allows you not only to set up different databases and so on, but also to configure environment-specific custom variables for use in your stream definitions. For example, you might a file called `my-xd-config.yml` stored in your home directory on your local development machine:

```
myenv:
  dir: /Users/me/testfiles
```
and you would enable it using

```
export XD_CONFIG=/Users/me/my-xd-config.yml
```

whereas in production, you might have a pre-installed configuration in `/var/xd/production-config.xml` with the configuration:

```
myenv:
  dir: /data/files
```

In your production environment you would set

```
export XD_CONFIG=/var/xd/production-config.yml
```

You could then use the variable `myenv.data` in a stream definition which would work across all environments:

```
http | file --dir=${myenv.dir}
```

==== Configuring the Job Repository database

Spring XD saves the state of the batch job workflows in a relational database.  By default XD starts an embedded HSQLDB.  The HSQLDB should only be used for development and learning.  But when it comes time to deploy to production, you will need to select another database. Spring XD is actively tested on 3 databases: HSQLDB (Version: 2.3.0), MySql (Version: 5.1.23) and Postgres (Version 9.2-1002), though many others are supported such as Oracle.

The file `xd-config.yml` located in `$XD_HOME/config` has commented out sections that you can uncomment and edit for your database environment.  The JDBC driver jars for the HSQLDB, MySql, and Postgres are already on the XD classpath.

In cases where you are referencing a database that has not been initialized with the batch tables, Spring XD will automatically create and initialize the tables necessary to store job workflow information.

===== HSQLDB

The default values for the datasource as taken from the default https://github.com/spring-projects/spring-xd/blob/master/spring-xd-dirt/src/main/resources/application.yml[application.yml] file that is embedded in the XD jar file are:

```
spring:
  profiles:
    active: default,hsqldb
  datasource:
    url: jdbc:hsqldb:hsql://${hsql.server.host:localhost}:${hsql.server.port:9101}/${hsql.server.dbname:xdjob}
    username: sa
    password:
    driverClassName: org.hsqldb.jdbc.JDBCDriver
```

The expression `${hsql.server.host:localhost}` means that if there is a http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/PropertySource.html[PropertySource] that has the key name 'hsql.server.host', the value associated with that key will be used, otherwise the value `localhost` will be used.

Spring XD maintains an ordered list of `PropertySources` that are searched through to resolve a property name.  System properties and OS environment properties have higher precedence over values in `xd-config.yml`.  In the above example, if you set the environment variable `hsql_server_host`, the environment variable's value will be used instead of `localhost`.

There is also a http://gordondickens.com/wordpress/2012/06/12/spring-3-1-environment-profiles/[profile] named 'hsqldb' that is enabled as part of setting this datasource. This allows for grouping together components of the application and loading only if they are associated with an enabled profile.  This is useful if you are developing custom modules for Spring XD.

===== HSQLDB

The HSQLDB database is already configured as part of the default profile.  You can change the host, port, database name, and database filename used by uncommenting the following lines of configuration in `xd-config.yml` and edit the use the relevant values for your environment.

```
hsql:
  server:
    host: localhost
    port: 9101
    dbname: xdjob
    database: xdjobrepotest
```
To change the datasource url, username and password uncomment and modify the following section

```
spring:
  datasource:
    url: jdbc:hsqldb:hsql://${hsql.server.host:localhost}:${hsql.server.port:9101}/${hsql.server.dbname:xdjob}
    username: sa
    password:
    driverClassName: org.hsqldb.jdbc.JDBCDriver
```

The full section is shown but you can override as little as necessary, e.g. it is unlikely you would need to specify again the driverClassName.

===== MySql

To configure MySql, uncomment the following lines of configuration in `xd-config.yml` and edit to use relevant values for your environment.

```
spring:
  datasource:
    url: jdbc:mysql://yourDBhost:3306/yourDB
    username: yourUsername
    password: yourPassword
    driverClassName: com.mysql.jdbc.Driver
  profiles:
    active: default,mysql
```

These values can be overridden using environment variables of the form `spring_datasource_url` etc.

===== Postgres

To configure Postgres, uncomment the following lines of configuration in `xd-config.yml` and edit to use relevant values for your environment.

```
spring:
  datasource:
    url: jdbc:postgresql://yourDBhost:5432/yourDB
    username: yourUsername
    password: yourPassword
    driverClassName: org.postgresql.Driver
  profiles:
    active: default,postgresql
```

These values can be overridden using environment variables of the form `spring_datasource_url` etc.

===== Redis

When you are running in distributed mode where the admin server or containers are on different machines than the Redis server, you need to configure XD to reference the redis instance.  In the application.yml file, update the redis settings with appropriate host and port.

```
spring:
  redis:
   port: 6379
   host: localhost
```

These values can be overridden using environment variables of the form `spring_redis_port` etc.

===== RabbitMQ

When you are running in distributed mode where the admin server or containers are on different machines than the RabbitMQ server, you need to configure XD to reference the rabbit instance.  In the xd-config.yml file, update the rabbit settings with appropriate host and port.

```
spring:
  rabbitmq:
   host: localhost
   port: 5672
   username: guest
   password: guest
   virtual_host: /
```

These values can be overridden using environment variables of the form `spring_rabbitmq_port` etc.

===== Server Port

The port for the admin sever UI, RESTful API, and general health/monitoring endpoints is set via the configuration section.  See http://projects.spring.io/spring-boot/docs/spring-boot-actuator/docs/Features.html[Spring Boot Management Endpoints] for more information about the variety of common non-functional features that help with supporting applications in production.

```
server:
  port: 9393
```
This value can be overridden using an environment variable of the form `server_port`.

===== Batch Jobs accessing JDBC

The provided batch jobs that read from or write to JDBC use a separate `batch-jdbc.properties` file to
configure the JDBC connection for the data that the jobs process. You can find this file in the `$XD_HOME/config` directory. This file is configured to write to the HSQL database that is started by default. If you change to use another database configuration, remember to change this `batch-jdbc.properties` file as well since it doesn't automatically reflect the changes made for storing the batch jobs' metadata (this should change in the next XD release).

===== Local transport

Local transport uses a http://docs.spring.io/spring-integration/docs/latest-ga/api/org/springframework/integration/channel/QueueChannel.html[QueueChannel] to pass data between modules.  There are a few properties you can configure on the QueueChannel

* `xd.local.transport.named.queueSize` - The capacity of the queue, the default value is `Integer.MAX_VALUE`
* `xd.local.transport.named.polling` - Messages that are buffered in a QueueChannel need to be polled to be consumed.  This property controls the fixed rate at which polling occurs.  The default value is 1000 ms.

