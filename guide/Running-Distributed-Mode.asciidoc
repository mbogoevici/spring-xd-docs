=== Introduction
The Spring XD distributed runtime (DIRT) supports distribution of processing tasks across multiple nodes. See link:Getting-Started#getting-started[Getting Started] for information on running Spring XD as a single node.

Spring XD can use several middlewares when running in distributed mode. At the time of writing, http://redis.io/[*Redis*] and http://www.rabbitmq.com/[*RabbitMQ*] are available options.

Let's see how to install those first, before diving into the specifics of running Spring XD. Again, those are alternatives when it comes to transport middleware used, so you need only one (although practically, Redis may be required for other purposes, for example storage of definitions or link:Analytics#analytics[Analytics]).

*Redis* is actually the default when it comes to running in distributed mode, so let's start with that.

=== Using Redis
==== Installing Redis

If you already have a running instance of *Redis* it can be used for Spring XD. By default Spring XD will try to use a _Redis_ instance running on *localhost* using *port 6379*. You can change that in the `redis.properties` file residing in the `config/` directory.

If you don't have a pre-existing installation of _Redis_, you can use the _Spring XD_ provided instance (For Linux and Mac). Inside the _Spring XD_ installation directory (spring-xd) do:
[source,sh]
----
$ cd redis/bin
$ ./install-redis
----

This will compile the _Redis_ source tar and add the _Redis_ executables under redis/bin:

* redis-check-dump
* redis-sentinel
* redis-benchmark
* redis-cli
* redis-server

You are now ready to start _Redis_ by executing

[source,sh]
----
$ ./redis-server
----

TIP: For further information on installing _Redis_ in general, please checkout the http://redis.io/topics/quickstart[Redis Quick Start] guide. If you are using _Mac OS_, you can also install _Redis_ via http://mxcl.github.io/homebrew/[Homebrew]

==== Troubleshooting
===== Redis on Windows

Presently, _Spring XD_ does not ship _Windows_ binaries for _Redis_ (See https://jira.springsource.org/browse/XD-151[XD-151]). However, _Microsoft_ http://blogs.msdn.com/b/interoperability/archive/2013/04/22/redis-on-windows-stable-and-reliable.aspx[is actively working] on supporting _Redis_ on _Windows_. You can download _Windows_ _Redis_ binaries from:

https://github.com/MSOpenTech/redis/tree/2.6/bin/release

===== Redis is not running

If you try to run _Spring XD_ and Redis is NOT running, you will see the following exception:

----
11:26:37,830 ERROR main launcher.RedisContainerLauncher:85 - Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisException: Unable to connect
Redis does not seem to be running. Did you install and start Redis? Please see the Getting Started section of the guide for instructions.
----

==== Starting Redis

[source,sh]
----
$ redis-server
----

You should see something like this:

----
[35142] 01 May 14:36:28.939 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
[35142] 01 May 14:36:28.940 * Max number of open files set to 10032
                _._
           _.-``__ ''-._
      _.-``    `.  `_.  ''-._           Redis 2.6.12 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._
 (    '      ,       .-`  | `,    )     Running in stand alone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
 |    `-._   `._    /     _.-'    |     PID: 35142
  `-._    `-._  `-./  _.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |           http://redis.io
  `-._    `-._`-.__.-'_.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |
  `-._    `-._`-.__.-'_.-'    _.-'
      `-._    `-.__.-'    _.-'
          `-._        _.-'
              `-.__.-'

[35142] 01 May 14:36:28.941 # Server started, Redis version 2.6.12
[35142] 01 May 14:36:28.941 * The server is now ready to accept connections on port 6379
----

=== Using RabbitMQ
==== Installing RabbitMQ

If you already have a running instance of _RabbitMQ_ it can be used for Spring XD. By default Spring XD will try to use a _Rabbit_ instance running on *localhost* using *port 5674*. The default account credentials of *guest/guest* are assumed. You can change that in the `rabbit.properties` file residing in the `config/` directory.

If you don't have a _RabbitMQ_ installation already, head over to http://www.rabbitmq.com and follow the instructions. Packages are provided for Windows, Mac and various flavor of unix/linux. 

==== Launching RabbitMQ

Start the *RabbitMQ* broker by running the rabbitmq-server script:
[source,sh]
----
$ rabbitmq-server
----

You should see something similar to this:
----

              RabbitMQ 3.1.1. Copyright (C) 2007-2013 VMware, Inc.
  ##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/
  ##  ##
  ##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log
  ######  ##        /usr/local/var/log/rabbitmq/rabbit@localhost-sasl.log
  ##########
              Starting broker... completed with 7 plugins.
----

=== Starting Spring XD in Distributed Mode

Spring XD consists of two servers

* XDAdmin - controls deployment of modules into containers
* XDContainer - executes modules

You can start the +xd-container+ and +xd-admin+ servers individually as follows:

[source,sh]
----
xd/bin>$ ./xd-admin
xd/bin>$ ./xd-container
----

==== Choosing a Transport
The --transport option drives the choice of middleware to use. As stated previously, *Redis* is currently the default, so the above example is equivalent to 
[source,sh]
----
xd/bin>$ ./xd-admin --transport redis
xd/bin>$ ./xd-container --transport redis
----

To run using *RabbitMQ*, simply issue the following commands:
[source,sh]
----
xd/bin>$ ./xd-admin --transport rabbit
xd/bin>$ ./xd-container --transport rabbit
----

[NOTE]
=====================================================================
If you have multiple XD systems (i.e. an xd-admin server and 0+ containers) using different Redis instances for storage but sharing a single RabbitMQ server for transport, you may encounter issues if each system contains streams of the same name. We recommend using a different RabbitMQ virtual host for each system. Update the `rabbit.vhost` property in `rabbit.properties` to point XD at the correct virtual host.
=====================================================================

==== Choosing a Store
By default, the xd-admin server stores stream definitions and other information in Redis, using the connection parameters specified in `redis.properties`. Use the --store option to specify another storage type. Currently, only "redis" and "memory" are available.
[source,sh]
----
xd/bin>$ ./xd-admin --store memory
----

==== Other Options
There are additional configuration options available for these scripts:
 
To specify the location of the Spring XD install,

[source,sh]
----
xd/bin>$ ./xd-admin --xdHomeDir <xd-install-directory>
xd/bin>$ ./xd-container --xdHomeDir <xd-install-directory>
----

To specify the http port of the XDAdmin server,

[source,sh]
----
xd/bin>$ ./xd-admin --httpPort <httpPort> 
----

[[using-hadoop]]
=== Using Hadoop

Spring XD supports the following Hadoop distributions:

* hadoop12 - Apache Hadoop 1.2.1 (default)
* hadoop20 - Apache Hadoop 2.0.6-alpha
* hdp13 - Hortonworks Data Platform 1.3
* cdh4 - Cloudera CDH 4.3.1 
* phd1 - Pivotal HD 1.0

To specify the distribution to use for Hadoop client connections,

[source,sh]
----
xd/bin>$ ./xd-admin --hadoopDistro <distribution> 
xd/bin>$ ./xd-container --hadoopDistro <distribution> 
----

Pass in the +--help+ option to see other configuration properties.