=== Introduction
The Spring XD distributed runtime (DIRT) supports distribution of processing tasks across multiple nodes. See link:Getting-Started#getting-started[Getting Started] for information on running Spring XD as a single node.

Spring XD can use several middlewares when running in distributed mode. At the time of writing, http://redis.io/[*Redis*] and http://www.rabbitmq.com/[*RabbitMQ*] are available options.

Again, those are alternatives when it comes to transport middleware used, so you need only one (although practically, Redis may be required for other purposes, for example storage of definitions or link:Analytics#analytics[Analytics]).

Before we start on middleware discussion lets cover the command line args offered by both XD-Admin and XD-Container.  

==== CommandLine

Whether you are running the xd-admin, xd-container or even the xd-standalone you can always get help by typing the command followed by --help.  For example: 
----
./bin/xd-admin --help

 _____                           __   _______
/  ___|          (-)             \ \ / /  _  \
\ `--. _ __  _ __ _ _ __   __ _   \ V /| | | |
 `--. \ '_ \| '__| | '_ \ / _` |  / ^ \| | | |
/\__/ / |_) | |  | | | | | (_| | / / \ \ |/ /
\____/| .__/|_|  |_|_| |_|\__, | \/   \/___/
      | |                  __/ |
      |_|                 |___/
1.0.0.BUILD-SNAPSHOT             eXtreme Data


Started container : AdminServerApplication
Documentation: https://github.com/SpringSource/spring-xd/wiki

Usage:
 --analytics [redis]   : How to persist analytics such as counters and gauges
 --help (-?, -h)       : Show this help screen
 --httpPort <httpPort> : Http port for the REST API server
 --mgmtPort <mgmtPort> : The port for the management server
----

===== xd-admin command line args:

* analytics - The data store that will be used to store the analytics data.  The default is *redis*
* help - Displays help for the command args.  Help information may be accessed with a -? or -h.  
* httpPort - The http port for the REST API server.  Defaults to 9393.
* mgmtPort - The port for the management server.  Defaults to 9393.

===== xd-container command line args:

* analytics - How to persist analytics such as counters and gauges. The current is *redis* 
* hadoopDistro - The Hadoop distribution to be used for HDFS access.  HDFS is not available if not set.
* help - Displays help for the command args.  Help information may be accessed with a -? or -h.  
* mgmtPort - The port for the management server.  Defaults to 9393.
* transport - The transport to use for data messages (from container to container)

=== Using Redis

*Redis* is actually the default when it comes to running in distributed mode, so let's start with that.

==== Installing Redis

If you already have a running instance of *Redis* it can be used for Spring XD. By default Spring XD will try to use a _Redis_ instance running on *localhost* using *port 6379*. You can change that in the `redis.properties` file residing in the `config/` directory.

If you don't have a pre-existing installation of _Redis_, you can use the _Spring XD_ provided instance (For Linux and Mac). Inside the _Spring XD_ installation directory (spring-xd) do:
[source,sh]
----
$ cd redis/bin
$ ./install-redis
----

This will compile the _Redis_ source tar and add the _Redis_ executables under redis/bin:

* redis-check-dump
* redis-sentinel
* redis-benchmark
* redis-cli
* redis-server

You are now ready to start _Redis_ by executing

[source,sh]
----
$ ./redis-server
----

TIP: For further information on installing _Redis_ in general, please checkout the http://redis.io/topics/quickstart[Redis Quick Start] guide. If you are using _Mac OS_, you can also install _Redis_ via http://mxcl.github.io/homebrew/[Homebrew]

==== Troubleshooting
===== Redis on Windows

Presently, _Spring XD_ does not ship _Windows_ binaries for _Redis_ (See https://jira.springsource.org/browse/XD-151[XD-151]). However, _Microsoft_ http://blogs.msdn.com/b/interoperability/archive/2013/04/22/redis-on-windows-stable-and-reliable.aspx[is actively working] on supporting _Redis_ on _Windows_. You can download _Windows_ _Redis_ binaries from:

https://github.com/MSOpenTech/redis/tree/2.6/bin/release

===== Redis is not running

If you try to run _Spring XD_ and Redis is NOT running, you will see the following exception:

----
11:26:37,830 ERROR main launcher.RedisContainerLauncher:85 - Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisException: Unable to connect
Redis does not seem to be running. Did you install and start Redis? Please see the Getting Started section of the guide for instructions.
----

==== Starting Redis

[source,sh]
----
$ redis-server
----

You should see something like this:

----
[35142] 01 May 14:36:28.939 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
[35142] 01 May 14:36:28.940 * Max number of open files set to 10032
                _._
           _.-``__ ''-._
      _.-``    `.  `_.  ''-._           Redis 2.6.12 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._
 (    '      ,       .-`  | `,    )     Running in stand alone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
 |    `-._   `._    /     _.-'    |     PID: 35142
  `-._    `-._  `-./  _.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |           http://redis.io
  `-._    `-._`-.__.-'_.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |
  `-._    `-._`-.__.-'_.-'    _.-'
      `-._    `-.__.-'    _.-'
          `-._        _.-'
              `-.__.-'

[35142] 01 May 14:36:28.941 # Server started, Redis version 2.6.12
[35142] 01 May 14:36:28.941 * The server is now ready to accept connections on port 6379
----

=== Using RabbitMQ
==== Installing RabbitMQ

If you already have a running instance of _RabbitMQ_ it can be used for Spring XD. By default Spring XD will try to use a _Rabbit_ instance running on *localhost* using *port 5672*. The default account credentials of *guest/guest* are assumed. You can change that in the `rabbit.properties` file residing in the `config/` directory.

If you don't have a _RabbitMQ_ installation already, head over to http://www.rabbitmq.com and follow the instructions. Packages are provided for Windows, Mac and various flavor of unix/linux. 

==== Launching RabbitMQ

Start the *RabbitMQ* broker by running the rabbitmq-server script:
[source,sh]
----
$ rabbitmq-server
----

You should see something similar to this:
----

              RabbitMQ 3.1.1. Copyright (C) 2007-2013 VMware, Inc.
  ##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/
  ##  ##
  ##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log
  ######  ##        /usr/local/var/log/rabbitmq/rabbit@localhost-sasl.log
  ##########
              Starting broker... completed with 7 plugins.
----

=== Starting Spring XD in Distributed Mode

Spring XD consists of two servers

* XDAdmin - controls deployment of modules into containers
* XDContainer - executes modules

You can start the +xd-container+ and +xd-admin+ servers individually as follows:

[source,sh]
----
xd/bin>$ ./xd-admin
xd/bin>$ ./xd-container
----

==== Choosing a Transport
Spring XD uses two types of transports: control and data.  The control transport is used for sending control messages between the admin server and container nodes while the data transport is used for sending data between container nodes.  Since the admin server only uses the control transport, you can use either the command line argument `--transport` or `--controlTransport` to specify which transport to use.  For the container nodes, if you specify only the --transport option then the specified transport will be used for both control and data.  If you want to set them to different values, then use the `--transport` option to set the data transport and `--controlTransport` to set the control transport.

Since Redis is the default transport, the previous example is equivalent to passing in the --transport option with `redis` as the value.
[source,sh]
----
xd/bin>$ ./xd-admin --transport redis
xd/bin>$ ./xd-container --transport redis
----

To run using RabbitMQ, simply issue the following commands:
[source,sh]
----
xd/bin>$ ./xd-admin --transport rabbit
xd/bin>$ ./xd-container --transport rabbit
----

To run using RabbitMQ as your control transport and Redis as your data transport, simply issue the following commands:
[source,sh]
----
xd/bin>$ ./xd-admin --controlTransport rabbit
xd/bin>$ ./xd-container --transport redis --controlTransport rabbit
----

One could have also used the `--transport` option the admin node, but when mixing control and data transports it is recommended to be more explicit in your settings.

[NOTE]
=====================================================================
If you have multiple XD instances running that use different Redis instances for storage but share a single RabbitMQ server for transport, you may encounter issues if each system contains streams of the same name.  We recommend using a different RabbitMQ virtual host for each system. Update the `spring.rabbitmq.virtual_host` property in `$XD_HOME/config/rabbit.properties` to point XD at the correct virtual host.
=====================================================================

==== Choosing a Store
By default, the xd-admin server stores stream definitions and other information in Redis, using the connection parameters specified in `redis.properties`. Use the --store option to specify another storage type. Currently, only "redis" and "memory" are available.
[source,sh]
----
xd/bin>$ ./xd-admin --store memory
----

==== Choosing an Analytics provider
By default, the xd-container will store Analytics data in redis. At the time of writing, this is the only supported option (when running in distributed mode). Use the --analytics option to specify another backing store for Analytics data.
[source,sh]
----
xd/bin>$ ./xd-container --analytics redis
----

==== Other Options
There are additional configuration options available for these scripts:
 
To specify the location of the Spring XD install,

[source,sh]
----
xd/bin>$ ./xd-admin --xdHomeDir <xd-install-directory>
xd/bin>$ ./xd-container --xdHomeDir <xd-install-directory>
----

To specify the http port of the XDAdmin server,

[source,sh]
----
xd/bin>$ ./xd-admin --server.port <httpPort> 
----

The XDContainer nodes by default start up with --server.port 0 (which means they will scan for an available HTTP port). You can disable the HTTP endpoints for the XDContainer by setting --server.port=-1. Note that in this case HTTP source support will not work in a PaaS environment because typically it would require XD to bind to a specific port. Both the XDAdmin and XDContainer processes bind to --server.port $PORT (i.e. an environment variable if one is available, as is typical in a PaaS).

[NOTE]
=====================================================================
If you have multiple XD systems (i.e. an xd-admin server and 0+ containers) , you will need to configure the containers' hsqldb host to point to the admin server.  These instructions can be found https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#setting-up-to-use-remote-containers[here]. 
=====================================================================

[[using-hadoop]]
=== Using Hadoop

Spring XD supports the following Hadoop distributions:

* hadoop12 - Apache Hadoop 1.2.1
* hadoop22 - Apache Hadoop 2.2.0 (default)
* phd1 - Pivotal HD 1.1
* cdh4 - Cloudera CDH 4.6.0 
* hdp13 - Hortonworks Data Platform 1.3
* hdp20 - Hortonworks Data Platform 2.0

To specify the distribution to use for Hadoop client connections,

[source,sh]
----
xd/bin>$ ./xd-shell --hadoopDistro <distribution> 
xd/bin>$ ./xd-admin --hadoopDistro <distribution> 
xd/bin>$ ./xd-container --hadoopDistro <distribution> 
----

Pass in the +--help+ option to see other configuration properties.


=== XD-Shell in Distributed Mode

If you wish to use a XD-Shell that is on a different machine than where you deployed your admin server.  

1) Open your shell 

```
shell/bin>$ ./xd-shell
```

2) From the xd shell use the "admin config server" command i.e. 

```
admin config server <yourhost>:9393
```
