=== Introduction
The Spring XD distributed runtime (DIRT) supports distribution of processing tasks across multiple nodes. See link:Getting-Started#getting-started[Getting Started] for information on running Spring XD as a single node.

Spring XD can use several middlewares when running in distributed mode. At the time of writing, http://redis.io/[*Redis*] and http://www.rabbitmq.com/[*RabbitMQ*] are available options.

Let's see how to install those first, before diving into the specifics of running Spring XD. Again, those are alternatives when it comes to transport middleware used, so you need only one (although practically, Redis may be required for other purposes, for example storage of definitions or link:Analytics#analytics[Analytics]).

*Redis* is actually the default when it comes to running in distributed mode, so let's start with that.

=== Using Redis
==== Installing Redis

If you already have a running instance of *Redis* it can be used for Spring XD. By default Spring XD will try to use a _Redis_ instance running on *localhost* using *port 6379*. You can change that in the `redis.properties` file residing in the `config/` directory.

If you don't have a pre-existing installation of _Redis_, you can use the _Spring XD_ provided instance (For Linux and Mac). Inside the _Spring XD_ installation directory (spring-xd) do:
[source,sh]
----
$ cd redis/bin
$ ./install-redis
----

This will compile the _Redis_ source tar and add the _Redis_ executables under redis/bin:

* redis-check-dump
* redis-sentinel
* redis-benchmark
* redis-cli
* redis-server

You are now ready to start _Redis_ by executing

[source,sh]
----
$ ./redis-server
----

TIP: For further information on installing _Redis_ in general, please checkout the http://redis.io/topics/quickstart[Redis Quick Start] guide. If you are using _Mac OS_, you can also install _Redis_ via http://mxcl.github.io/homebrew/[Homebrew]

==== Troubleshooting
===== Redis on Windows

Presently, _Spring XD_ does not ship _Windows_ binaries for _Redis_ (See https://jira.springsource.org/browse/XD-151[XD-151]). However, _Microsoft_ http://blogs.msdn.com/b/interoperability/archive/2013/04/22/redis-on-windows-stable-and-reliable.aspx[is actively working] on supporting _Redis_ on _Windows_. You can download _Windows_ _Redis_ binaries from:

https://github.com/MSOpenTech/redis/tree/2.6/bin/release

===== Redis is not running

If you try to run _Spring XD_ and Redis is NOT running, you will see the following exception:

----
11:26:37,830 ERROR main launcher.RedisContainerLauncher:85 - Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisException: Unable to connect
Redis does not seem to be running. Did you install and start Redis? Please see the Getting Started section of the guide for instructions.
----

==== Starting Redis

[source,sh]
----
$ redis-server
----

You should see something like this:

----
[35142] 01 May 14:36:28.939 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
[35142] 01 May 14:36:28.940 * Max number of open files set to 10032
                _._
           _.-``__ ''-._
      _.-``    `.  `_.  ''-._           Redis 2.6.12 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._
 (    '      ,       .-`  | `,    )     Running in stand alone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
 |    `-._   `._    /     _.-'    |     PID: 35142
  `-._    `-._  `-./  _.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |           http://redis.io
  `-._    `-._`-.__.-'_.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |
  `-._    `-._`-.__.-'_.-'    _.-'
      `-._    `-.__.-'    _.-'
          `-._        _.-'
              `-.__.-'

[35142] 01 May 14:36:28.941 # Server started, Redis version 2.6.12
[35142] 01 May 14:36:28.941 * The server is now ready to accept connections on port 6379
----

=== Using RabbitMQ
==== Installing RabbitMQ

If you already have a running instance of _RabbitMQ_ it can be used for Spring XD. By default Spring XD will try to use a _Rabbit_ instance running on *localhost* using *port 5674*. The default account credentials of *guest/guest* are assumed. You can change that in the `rabbit.properties` file residing in the `config/` directory.

If you don't have a _RabbitMQ_ installation already, head over to http://www.rabbitmq.com and follow the instructions. Packages are provided for Windows, Mac and various flavor of unix/linux. 

==== Launching RabbitMQ

Start the *RabbitMQ* broker by running the rabbitmq-server script:
[source,sh]
----
$ rabbitmq-server
----

You should see something similar to this:
----

              RabbitMQ 3.1.1. Copyright (C) 2007-2013 VMware, Inc.
  ##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/
  ##  ##
  ##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log
  ######  ##        /usr/local/var/log/rabbitmq/rabbit@localhost-sasl.log
  ##########
              Starting broker... completed with 7 plugins.
----

=== Starting Spring XD in Distributed Mode

Spring XD consists of two servers

* XDAdmin - controls deployment of modules into containers
* XDContainer - executes modules

You can start the +xd-container+ and +xd-admin+ servers individually as follows:

[source,sh]
----
xd/bin>$ ./xd-admin
xd/bin>$ ./xd-container
----

==== Choosing a Transport
The --transport option drives the choice of middleware to use. As stated previously, *Redis* is currently the default, so the above example is equivalent to 
[source,sh]
----
xd/bin>$ ./xd-admin --transport=redis
xd/bin>$ ./xd-container --transport=redis
----

To run using *RabbitMQ*, simply issue the following commands:
[source,sh]
----
xd/bin>$ ./xd-admin --transport=rabbit
xd/bin>$ ./xd-container --transport=rabbit
----

[NOTE]
=====================================================================
If you have multiple XD systems (i.e. an xd-admin server and 0+ containers) using different Redis instances for storage but sharing a single RabbitMQ server for transport, you may encounter issues if each system contains streams of the same name. We recommend using a different RabbitMQ virtual host for each system. Update the `rabbit.vhost` property in `rabbit.properties` to point XD at the correct virtual host.
=====================================================================

==== Choosing a Store
By default, the xd-admin server stores stream definitions and other information in Redis, using the connection parameters specified in `redis.properties`. Use the --store option to specify another storage type. Currently, only "redis" and "memory" are available.
[source,sh]
----
xd/bin>$ ./xd-admin --store memory
----

==== Choosing an Analytics provider
By default, the xd-container will store Analytics data in redis. At the time of writing, this is the only supported option (when running in distributed mode). Use the --analytics option to specify another backing store for Analytics data.
[source,sh]
----
xd/bin>$ ./xd-container --analytics=redis
----

==== Other Options
There are additional configuration options available for these scripts:
 
To specify the location of the Spring XD install,

[source,sh]
----
xd/bin>$ ./xd-admin --xdHomeDir=<xd-install-directory>
xd/bin>$ ./xd-container --xdHomeDir=<xd-install-directory>
----

To specify the http port of the XDAdmin server,

[source,sh]
----
xd/bin>$ ./xd-admin --server.port=<httpPort> 
----

The XDContainer nodes by default start up with --server.port=0 (which means they will scan for an available HTTP port). You can disable the HTTP endpoints for the XDContainer by setting --server.port=-1. Note that in this case HTTP source support will not work in a PaaS environment because typically it would require XD to bind to a specific port. Both the XDAdmin and XDContainer processes bind to --server.port=$PORT (i.e. an environment variable if one is available, as is typical in a PaaS).

[NOTE]
=====================================================================
If you have multiple XD systems (i.e. an xd-admin server and 0+ containers) , you will need to configure the containers' hsqldb host to point to the admin server.  These instructions can be found https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#setting-up-to-use-remote-containers[here]. 
=====================================================================

[[using-hadoop]]
=== Using Hadoop

Spring XD supports the following Hadoop distributions:

* hadoop12 - Apache Hadoop 1.2.1 (default)
* hadoop22 - Apache Hadoop 2.2.0
* phd1 - Pivotal HD 1.1
* cdh4 - Cloudera CDH 4.3.1 
* hdp13 - Hortonworks Data Platform 1.3

To specify the distribution to use for Hadoop client connections,

[source,sh]
----
xd/bin>$ ./xd-admin --hadoopDistro <distribution> 
xd/bin>$ ./xd-container --hadoopDistro <distribution> 
----

Pass in the +--help+ option to see other configuration properties.


=== XD-Shell in Distributed Mode

If you wish to use a XD-Shell that is on a different machine than where you deployed your admin server.  

1) Open your shell 

```
shell/bin>$ ./xd-shell
```

2) From the xd shell use the "admin config server" command i.e. 

```
admin config server <yourhost>:9393
```

=== Application configuration 

In the XD_HOME/config directory you will see a application.template file.  This file 
contains all the property settings for a default XD deployment.  

* Rename the application.template to application.yml.
* Edit application.yml

==== Setting up the Job Repository database    

XD saves the state of the jobs in a relational database.  By default XD starts an embedded
HSQLDB.  The HSQLDB should only be used for development and a learning.  But when it comes 
time to deploy to production, you will need to select another database. XD has only been
tested on 3 databases: HSQLDB(API Version: 2.3.0), MySql (API Version: 5.1.23) and Postgres (API Version 9.2-1002).

===== Setting up Job Repository

In the application.yml file update the datasource:url, username, password, driverClassName to the database you have setup to store job information.  
```yaml
    url: <add the jdbc url for your database>
    username: <the user name>
    password: <the password>
    driverClassName: <you database driver>
```

===== MySql

```
    url: jdbc:mysql://yourDB:3306/xdjob
    username: xdjob
    password: yourpassword
    driverClassName: com.mysql.jdbc.Driver
```

===== Postgres

```
    url: jdbc:postgresql://yourDB:5432/xdjob
    username: xdjob
    password: yourpassword
    driverClassName: org.postgresql.Driver
```

In cases where you are referencing a database that has not been initialized with the batch tables, XD  will automatically create and initialize the tables necessary to store job information.

* Set the profile to use the correct database type.  The valid types are hsqldb, mysql, postgres.
In the example below we see that hsqldb is the active profile.  

```
spring:
  profiles:
    active: default,hsqldb
```

===== Setting Redis to connect to remote instance

When you are running in distributed mode where the admin server or containers are on different machines than the Redis server, we need to configure XD to reference the redis instance.  So in the application.yml file update the redis with appropriate host and port.

```
---
spring:
 data:
  redis:
   port: 6379
   host: localhost
```

===== Setting XD to connect to remote rabbit instance

When you are running in distributed mode where the admin server or containers are on different machines than the Rabbit server, we need to configure XD to reference the rabbit instance.  So in the application.yml file update the rabbit settings with appropriate host and port.

```
---
spring:
  rabbitmq:
   host: ${vcap.services.rabbitmq.credentials.hostname:localhost}
   port: ${vcap.services.rabbitmq.credentials.port:5672}
   username: ${vcap.services.rabbitmq.credentials.username:guest}
   password: ${vcap.services.rabbitmq.credentials.password:guest}
   virtual_host: ${vcap.services.rabbitmq.credentials.vhost:/}
```