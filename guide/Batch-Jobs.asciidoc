=== Introduction

This chapter will show you how to execute http://www.springsource.org/spring-batch[Spring Batch] Jobs using Spring XD.

=== Setting up a simple Batch Job

==== Creating the Tasklet

We will create a very simple http://static.springsource.org/spring-batch/reference/html/configureStep.html#taskletStep[Tasklet]. The sole purpose of this Tasklet is to print out "Hello Spring XD!".  Note, you can find the the source code and the maven build files for this example in the https://github.com/SpringSource/spring-xd-samples[Spring XD Samples] repository.

[source,java]
----
package org.springframework.springxd.samples.batch;

import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;

public class HelloSpringXDTasklet implements Tasklet {

	public RepeatStatus execute(StepContribution contribution,
			ChunkContext chunkContext) throws Exception {

		System.out.println("Hello Spring XD!");

		return RepeatStatus.FINISHED;
	}
}
----

Please ensure that you deploy this class as part of a Jar file to the Spring XD *${xd.home}/lib* folder. Once you restart the Spring XD container the class will be automatically added to the classpath and thus made available.  If you are bulding from the sample repository do the following in the directory `spring-xd-samples/batch-simple`

* `mvn package`
* `cp ./target/springxd-batch-simple-1.0.0.BUILD-SNAPSHOT.jar $XD_HOME/lib`

==== Setting Up the Application Context

Under *modules/job*, in the Spring XD home directory, please create the following XML Application context file named *myjob.xml*: 

[source,xml]
----

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd">

	<batch:job id="job">
		<batch:step id="helloSpringXDStep">
			<batch:tasklet ref="helloSpringXDTasklet" />
		</batch:step>
	</batch:job>

	<bean id="helloSpringXDTasklet"
		class="org.springframework.springxd.samples.batch.HelloSpringXDTasklet" />

</beans>
----

Please note that this context file *must contain single batch job whose id is `job`.*

[source,xml]
----
        <batch:job id="job">
		<batch:step id="helloSpringXDStep">
			<batch:tasklet ref="helloSpringXDTasklet" />
		</batch:step>
	</batch:job>
----

If you are bulding from the sample repository do the following in the directory `spring-xd-samples/batch-simple`

* `cp ./src/main/resources/myjob.xml $XD_HOME/modules/job/`

=== Execute the Batch Job

In order to execute the Batch Job, several options exist:

* Execute the Batch Job Once
* Execute the Batch Job using an AdHoc Cron Expression
* Execute the Batch using a named Cron-Trigger

==== Execute the Batch Job Once 
There are 2 steps executing any job:

1) Create the job 
----
xd:> job create --name helloSpringXD --definition "myjob"
----
In the logging output of the XDContainer you should see the following:
----
14:17:46,793  INFO http-bio-8080-exec-5 job.JobPlugin:87 - Configuring module with the following properties: {numberFormat=, dateFormat=, makeUnique=true, xd.stream.name=helloSpringXD}
14:17:46,837  INFO http-bio-8080-exec-5 module.SimpleModule:140 - initialized module: SimpleModule [name=myjob, type=job, group=helloSpringXD, index=0]
14:17:46,840  INFO http-bio-8080-exec-5 module.SimpleModule:154 - started module: SimpleModule [name=job, type=job, group=helloSpringXD, index=0]
14:17:46,840  INFO http-bio-8080-exec-5 module.ModuleDeployer:152 - launched job module: helloSpringXD:myjob:0
----
2) Triggering the job.
----
xd:> stream create --name myTriggerStream --definition "trigger > :job:helloSpringXD"
----
In the logging output of the XDContainer you should see the following
----
14:21:04,719  INFO http-bio-8080-exec-7 job.JobPlugin:87 - Configuring module with the following properties: {numberFormat=, dateFormat=, makeUnique=true, xd.stream.name=myTriggerStream}
14:21:04,763  INFO http-bio-8080-exec-7 module.SimpleModule:140 - initialized module: SimpleModule [name=trigger, type=source, group=myTriggerStream, index=0]
14:21:04,765  INFO http-bio-8080-exec-7 module.SimpleModule:154 - started module: SimpleModule [name=trigger, type=source, group=myTriggerStream, index=0]
14:21:04,767  INFO http-bio-8080-exec-7 module.ModuleDeployer:152 - launched source module: myTriggerStream:trigger:0
Hello Spring XD!
----
==== Execute job from a stream
You can execute a batch job in the flow of a stream.
----
 stream create --name jobStream --definition "http > :job:myHttpJob"
----
Where "myHttpJob" is the name of the job.

==== Retrieve notification from job upon completion
----
stream create --name jobNotifications --definition ":myHttpJob-notifications >log"
----
In this example, the job will send a notification to the log upon completion with its status. 
In the logging output of the container you should see something like the following:
----
15:26:30,029  WARN task-scheduler-5 logger.jobNotifications:145 - JobExecution: id=1, version=2, startTime=Wed Aug 28 15:26:30 EDT 2013, endTime=Wed Aug 28 15:26:30 EDT 2013, lastUpdated=Wed Aug 28 15:26:30 EDT 2013, status=COMPLETED, exitStatus=exitCode=COMPLETED;exitDescription=, job=[JobInstance: id=1, version=0, Job=[myHttpJob.job]], jobParameters=[{random=0.49881213192780494}]
----
==== Execute the Batch using Cron-Trigger

You can execute a batch job based on a cron scheduler by creating a stream using the cron-trigger source.  

----
xd:> stream create --name cronStream --definition "cron-trigger --cron='0/5 * * * * *'  > :job:myCronJob" 

----
You can also pass in parameters to the batch job by using the --payload expression.
----
xd:> stream create --name cronStream --definition "cron-trigger --cron='0/5 * * * * *'  --payload='{"param1":"Kenny"}' > :job:myCronJob"  
----
NOTE: The payload content must be in a JSON-based map representation.

==== Execute the Batch using a Fixed-Delay-Trigger

You can explicitly create a Fixed Delay Trigger by creating a stream that uses the trigger source:

----
xd:> stream create --name fdStream --definition "fixed-delay-trigger --payload='{"param1":"fixedDelayKenny"}' --fixedDelay=10 > :job:myXDJob" 

----

=== Removing Batch Jobs and Triggers 

==== Stopping and Removing the Batch Job

Batch Jobs can be deleted by executing:

----
xd:> job destroy helloSpringXD
----

Alternatively, one can just undeploy the job, keeping its definition around for a future redeployment:

----
xd:> job undeploy helloSpringXD
----



==== Removing the Cron Trigger

Cron Triggers can be deleted by executing:

----
xd:> stream destroy cronStream
----


 