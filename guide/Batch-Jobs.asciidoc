=== Introduction

This chapter will show you how to execute http://www.springsource.org/spring-batch[Spring Batch] Jobs using Spring XD.

=== Setting up a simple Batch Job

==== Creating the Tasklet

We will create a very simple http://static.springsource.org/spring-batch/reference/html/configureStep.html#taskletStep[Tasklet]. The sole purpose of this Tasklet is to print out "Hello Spring XD!".

[source,xml]
----
package org.springframework.xd.dirt.plugins.job;

import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;

public class HelloSpringXDTasklet implements Tasklet {

	@Override
	public RepeatStatus execute(StepContribution contribution,
			ChunkContext chunkContext) throws Exception {

		System.out.println("Hello Spring XD!");

		return RepeatStatus.FINISHED;
	}
}
----

Please ensure that you deploy this class as part of a Jar file to the Spring XD *${xd.home}/lib* folder. Once you restart the Spring XD container the class will be automatically added to the classpath and thus made available.

==== Setting Up the Application Context

Under *modules/job*, in the Spring XD home directory, please create the following XML Application context file named *myjob.xml*: 

[source,xml]
----

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd">

	<batch:job id="helloSpringXD">
		<batch:step id="helloSpringXDStep">
			<batch:tasklet ref="helloSpringXDTasklet" />
		</batch:step>
	</batch:job>

	<bean id="helloSpringXDTasklet"
		class="org.springframework.xd.dirt.plugins.job.HelloSpringXDTasklet" />

</beans>
----

=== Execute the Batch Job

In order to execute the Batch Job, several options exist:

* Execute the Batch Job Once (Immediately)
* Execute the Batch Job using an AdHoc Cron Expression
* Execute the Batch using a named Cron-Trigger

==== Execute the Batch Job Once (Immediately)

----
xd:> job create --name helloSpringXD --definition "myjob"
----

==== Execute the Batch Job using an AdHoc Cron Expression

----
xd:> job create --name helloSpringXD --definition "myjob --cron='*/10 * * * * *'"
----

==== Execute the Batch using a named Cron-Trigger

You can explicitly create a named Trigger using:

----
xd:> trigger create --name mytrigger --definition "trigger --cron='*/10 * * * * *'"

----

==== Execute the Batch using a named Fixed-Rate-Trigger

You can explicitly create a named Trigger using:

----
xd:> trigger create --name mytrigger --definition "trigger --fixedRate='5000'"

----
==== Using a named trigger with the job
The trigger will be added to the Common Context, which is shared across Plugins. Once the Trigger is created, we can reference the trigger when setting up the Batch Job:

----
xd:> job create --name helloWorldJob --definition "myjob --trigger=mytrigger"
----

=== Removing Batch Jobs and Triggers 

==== Stopping and Removing the Batch Job

Batch Jobs can be deleted by executing:

----
xd:> job destroy helloSpringXD
----

Alternatively, one can just undeploy the job, keeping its definition around for a future redeployment:

----
xd:> job undeploy helloSpringXD
----



==== Removing the Cron Trigger

Cron Triggers can be deleted by executing:

----
xd:> trigger destroy mytrigger
----

NOTE: Be advised that when removing Triggers from the Context they may still be referenced by running Batch Jobs.  Batch jobs that were created to use a trigger will continue to run on the schedule defined by the trigger even though it was destroyed.


 