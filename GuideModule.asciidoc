= Modules
== Introduction
The XD runtime environment (DIRT) supports data ingestion by allowing users to define link:Streams[streams]. Streams are composed of _modules_ which encapsulate a unit of work into a reusable component. A module has the following required attributes:

* name - the name of the component, normally a single word representing the purpose of the module. Examples are _file_, _http_, _syslog_.
* type - Modules are categorized by type, typically representing the role or function of the module, but may  represent any category. Current XD module types include _source_, _sink_, and _processor_ which indicate how they modules may be composed in a stream. Specifically, a source polls an external resource, or is triggered by an event and only provides an output. The first module in a stream is always a source. A processor performs some type of transformation or business logic and defines in input and one or more outputs. A sink provides only in input and outputs data to an external resource to terminate the stream. 
* instance id - This represents a named instance of a module with a given name and type, with a specific configuration. 

Modules are configurable. For example, the file source accepts a _name_ property which indicates a directory name which is polled for files. This property defaults to the stream name if not provided.

XD comes with a number of modules used for assembling streams which perform common input and/or output operations with files, HDFS, http, twitter, syslog, GemFire, and more. Users can easily assemble these into streams to build complex big data applications without having to know the underlying Spring products on which XD is built. 

However, if you are interested in extending XD with your own modules, some knowledge of Spring, Spring Integration, and Spring Batch is essential. The remainder of this document assumes the reader has some familiarity with these topics.

== Modules and Spring
At the core, a module is any component that may be implemented using a Spring application context. In this respect, the concept may be extended for purposes other than data ingestion. The types mentioned above (source, processor,sink) are specific to XD and constructing streams. But other module types are envisioned. 

A (https://github.com/SpringSource/spring-xd/blob/master/spring-xd-module/src/main/java/org/springframework/xd/module/Module.java)[Module] is typically configured using property placeholders. In addition to properties, modules may reference Spring beans which are defined externally such that each module instance may inject a different implementation of a bean. In addition, modules may define Spring environment profiles which may be activated by each module instance. This type of configuration is only possible if each module is created in its own application context.  

 

== Integration Modules


== Creating a Module
== Registering a Module