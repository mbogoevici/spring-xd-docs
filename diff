commit da7f7a58a063b34fd442bf36358fcae70f6a13d0
Author: Gary Russell <grussell@pivotal.io>
Date:   Fri Oct 31 12:47:29 2014 -0400

    XD-2300 Dead Letter Queue Docs

diff --git a/guide/MessageBus.asciidoc b/guide/MessageBus.asciidoc
index 5f0a59c..af4f880 100644
--- a/guide/MessageBus.asciidoc
+++ b/guide/MessageBus.asciidoc
@@ -25,13 +25,14 @@ To configure the entire bus for HA, create a policy:
 
 ==== RabbitMQ Message Bus
 
-Note: the following applies to normally deployed streams. When direct binding between modules is being used, exceptions thrown by the consumer are thrown back to the producer.
+NOTE: The following applies to normally deployed streams. When direct binding between modules is being used, exceptions thrown by the consumer are thrown back to the producer.
 
-
-When a consuming module (processor, sink) fails to handle a message, the bus will retry delivery based on the module (or default bus) retry configuration. The default configuration will make 3 attempts to deliver the message. The retry configuration can be modified at the bus level (in servers.yml), or for an individual stream/module using the deployment manifest.
+When a consuming module (processor, sink) fails to handle a message, the bus will retry delivery based on the module (or default bus) retry configuration. The default configuration will make 3 attempts to deliver the message. The retry configuration can be modified at the bus level (in +servers.yml+), or for an individual stream/module using the deployment manifest.
 
 When retries are exhausted, by default, messages are discarded. However, using RabbitMQ, you can configure such messages to be routed to a dead-letter exchange/dead letter queue. See the https://www.rabbitmq.com/dlx.html[RabbitMQ Documentation] for more information.
 
+NOTE: The following configuration examples assume you are using the default bus +prefix+ used for naming rabbit elements: +"xdbus."+
+
 Consider a stream: +stream create foo --definition "source | processor | sink"+
 
 The first _pipe_ (by default) will be backed by a queue named +xdbus.foo.0+, the second by +xdbus.foo.1+. Messages are routed to these queues using the default exchange (with routing keys equal to the queue names).
@@ -52,6 +53,17 @@ Now, when the sink fails to handle a message, after the configured retries are e
 
 There is no automated mechanism provided to move dead lettered messages back to the bus queue.
 
+
+*Automatic Dead Lettering Queue Binding*
+
+Starting with _version 1.1_, the dead letter queue and binding can be automatically configured by the system. A new property +autoBindDLQ+ has been added; it can be set at the bus level (in +servers.yml+) or using deployment properties, e.g. +--properties module.*.consumer.autoBindDLQ=true+ for all modules in the stream. When +true+, the dead letter queue will be declared (if necessary) and bound to a dead letter exchange named +xdbus.DLX+ (again, assuming the default +prefix+).
+
+In the above example, where we have queues +xdbus.foo.0+ and +xdbus.foo.1+, the system will also create +xdbus.foo.0.dlq+, bound to +xdbus.DLX+ with routing key +xdbus.foo.0+ and +xdbus.foo.1.dlq+, bound to +xdbus.DLX+ with routing key +xdbus.foo.1+.
+
+NOTE: This just sets up the DLQ and binding, you still need to set a policy to enable dead lettering on the queues, routing failed messages to +xdbus.DLX+:
+
++rabbitmqctl set_policy DLX "^xdbus\..*" \'{"dead-letter-exchange":"xdbus.DLX"}' --apply-to queues+
+
 ==== Redis Message Bus
 
 When Redis is the transport, the failed messages (after retries are exhausted) are +LPUSH+ed to a +LIST ERRORS:<stream>.n+ (e.g. +ERRORS:foo.1+ in the above example in the _RabbitMQ Message Bus_ section).

