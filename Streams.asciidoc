Introduction
------------

In Spring XD, a basic stream defines the ingestion of data from a _source_ to a _sink_. Streams are managed using the `StreamServer` from the `spring-xd-dirt` subproject and defined in terms of source and sink _modules_. Modules are predefined configurations for sources and sinks and examples can be found in the `modules` directory within the `spring-xd` project footnote:[Using the filesystem is just one possible way of configuring a module registry. A Redis implementation would be another option]. When you ask the `StreamServer` to set up a new stream, it looks in the modules directory for the source and sink definitions.

The `StreamServer`
------------------

The `StreamServer` is a prototype implementation for managing streams footnote:[The server name is likely to change and the functionality will be expanded beyond basic stream handling]. You can start it by running `./gradlew launch` from the root directory. It exposes a REST API (at the `/streams`) endpoint to which you can post commands to define new streams. The commands are built from a simple DSL. For example, let's walk through what happens if we execute the following request

  $ curl -X POST -d "testsource | testsink" http://localhost:8080/streams/mystream

The DSL uses the "pipe" symbol `|`, to connect a source to a stream. The stream server finds the `testsource` and `testsink` definitions in the modules directory and uses them to setup the stream footnote:[The definitions are just standard Spring configuration files].

TODO: Can't get logging to work with StreamServer, so no output.

Other Source and Sink Types
----------------------------


 

DSL Syntax
----------
In the example above, we connected a source directly to a sink. It is also possible to interperse "processors" between the two. TODO: Example ???













