== GemFire Sinks

Currently XD supports GemFire's client-server topology. A GemFire sink requires a cache server to be running in a separate process and its host and port must be known (NOTE: GemFire locators are not supported yet).  The XD distribution includes a GemFire server executable suitable for development and test purposes. It is made available under GemFire's development license which is limited to 3 nodes. Streams that write to GemFire create a client cache and client region. No data is cached on the client.

=== Launching the XD GemFire Server

The GemFire Server provided by XD is a Java main class that runs with a Spring configured cache server. The configuration is passed as a command line argument to the server's main method. The configuration includes a cache server port and one or more configured region. XD includes a sample cache configuration called  https://github.com/SpringSource/spring-xd/blob/master/spring-xd-gemfire-server/config/cq-demo.xml[cq-demo]. This starts a server on port 40404 and creates a region named _Stocks_. A Logging cache listener is configured  for the region to log region events.  (TBD: describe launch script)

=== Configuration

There are 2 implementation of the gemfire sink: _gemfire-server_ and _gemfire-json-server_. They are identical except the latter converts JSON string payloads to a JSON document type proprietary to GemFire. This allows the contents to be parsed so that a simple SpEL expression can be defined to extract one or more input fields to use as a cache key. GemFire's JSON representation also allows the cached content to be queried.  If this functionality is not needed, the gemfire-server module will write the payload directly to the configured region. As this discussion suggests, either gemfire module requires some configuration. The following parameters must be provided:

* _regionName_ - the name of the GemFire region. The actual region must be configured on the cache server. This module creates a client region, or proxy to the region. The default value is the stream name.
* _keyExpression_ - e SpEL expression which is evaluated to create a cache key. Typically, the key is derived from the payload itself so that multiple entries may be written to the cache. By default the cache key is the stream name, which will overwrite the value for every message received on the stream. 

For the example, suppose the JSON content looks like:

      {"symbol":"VMW", "price":73} 

We want this content to be cached under the stock symbol. So the stream specification is:

     http | gemfire-json-server --regionName=Stocks --keyExpression=payload.getField('VMW')

The keyExpression depends on the payload type. In this case, com.gemstone.org.json.JSONObject. JSONObject defines the _getField_ method.  Here's another example:

Suppose we have a Person object and a corresponding region configured:

[source, java]
class Person {
   String firstName;
   String lastName;
}
---

We could ingest Person objects into GemFire using:

    gemfire-server --regionName=Person --keyExpression=payload.firstName

In this case a processor module would need to precede the gemfire-server module in the stream to map the http source input to a Person, for example:

    http | someObjectMapper --type=my.example.Person | gemfire-server --regionName=Person --keyExpression=payload.firstName
